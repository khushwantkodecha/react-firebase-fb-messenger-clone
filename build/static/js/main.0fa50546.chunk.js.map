{"version":3,"sources":["images/icon.png","Message.js","firebase.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Message","message","isUser","username","className","db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","App","useState","messages","setMessaages","input","setInput","setUsername","useEffect","prompt","collection","orderBy","onSnapshot","snapshot","docs","map","doc","data","src","Iconn","width","height","alt","Fragment","type","value","placeholder","onChange","e","target","autoFocus","IconButton","color","variant","onClick","preventDefault","add","timestamp","FieldValue","serverTimestamp","disabled","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"sHAAAA,EAAOC,QAAU,IAA0B,kC,2MCe5BC,MAZf,YAAyC,IAAtBC,EAAqB,EAArBA,QACXC,EADgC,EAAZC,WACEF,EAAQE,SAEpC,OACE,yBAAKC,UAAS,uBAAkBF,GAAU,kBACxC,4BACIA,GAAU,yCAAQD,EAAQE,SAAhB,MADd,IACiDF,EAAQA,W,2DCMhDI,EAbKC,IAASC,cAAc,CACzCC,OAAQ,0CACRC,WAAY,wCACZC,YAAa,+CACbC,UAAW,wBACXC,cAAe,oCACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAGMC,YCiERC,MArEf,WAAgB,IAAD,EACoBC,mBAAS,IAD7B,mBACNC,EADM,KACIC,EADJ,OAGaF,mBAAS,IAHtB,mBAGNG,EAHM,KAGCC,EAHD,OAKmBJ,mBAAS,IAL5B,mBAKNf,EALM,KAKIoB,EALJ,KA6Bb,OAtBAC,qBAAU,WACRD,EAAYE,OAAO,6BAClB,IAEHD,qBAAU,WACRnB,EAAGqB,WAAW,YACXC,QAAQ,YAAa,QACrBC,YAAW,SAACC,GACXT,EAAaS,EAASC,KAAKC,KAAI,SAACC,GAAD,OAASA,EAAIC,gBAE/C,IAaD,yBAAK7B,UAAU,OACb,yBAAK8B,IAAKC,IAAOC,MAAM,MAAMC,OAAO,MAAMC,IAAI,mBAC9C,sCACU,IACR,2BACE,2BAAInC,KAGPgB,EAASY,KAAI,SAAC9B,GAAD,OACZ,kBAAC,IAAMsC,SAAP,KACE,kBAAC,EAAD,CAAStC,QAASA,EAASE,SAAUA,QAGzC,yBAAKC,UAAU,aACb,8BACE,2BACEA,UAAU,0BACVoC,KAAK,OACLC,MAAOpB,EACPqB,YAAY,iBACZC,SAAU,SAACC,GAAD,OAAOtB,EAASsB,EAAEC,OAAOJ,QACnCK,WAAS,IAEX,kBAACC,EAAA,EAAD,CACE3C,UAAU,cACV4C,MAAM,UACNC,QAAQ,YACRC,QAtCY,SAACN,GACrBA,EAAEO,iBACF9C,EAAGqB,WAAW,YAAY0B,IAAI,CAC5BjD,SAAUA,EACVF,QAASoB,EACTgC,UAAW/C,IAASU,UAAUsC,WAAWC,oBAE3CjC,EAAS,KAgCDkB,KAAK,SACLgB,UAAWnC,GAEX,kBAAC,IAAD,WC1DQoC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMxE,c","file":"static/js/main.0fa50546.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/icon.ed5fce30.png\";","import React from \"react\";\r\nimport \"./Message.css\";\r\n\r\nfunction Message({ message, username }) {\r\n  const isUser = username === message.username;\r\n\r\n  return (\r\n    <div className={`message__div ${isUser && \"message__self\"}`}>\r\n      <p>\r\n        {!isUser && <b> {`${message.username}:`}</b>} {message.message}\r\n      </p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Message;\r\n","import firebase from \"firebase\";\r\n\r\nconst firebaseApp = firebase.initializeApp({\r\n  apiKey: \"AIzaSyDo7xGRGViBd6YO2vnhv-3kD4pVx5fI7po\",\r\n  authDomain: \"messenger-clone-63b48.firebaseapp.com\",\r\n  databaseURL: \"https://messenger-clone-63b48.firebaseio.com\",\r\n  projectId: \"messenger-clone-63b48\",\r\n  storageBucket: \"messenger-clone-63b48.appspot.com\",\r\n  messagingSenderId: \"495948578551\",\r\n  appId: \"1:495948578551:web:b84818ac004f7d8f209df2\",\r\n  measurementId: \"G-EZ7N3L1ZLG\",\r\n});\r\n\r\nconst db = firebaseApp.firestore();\r\n\r\nexport default db;\r\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport Message from \"./Message\";\nimport Iconn from \"./images/icon.png\";\nimport { IconButton } from \"@material-ui/core\";\nimport SendIcon from \"@material-ui/icons/Send\";\nimport db from \"./firebase\";\nimport firebase from \"firebase\";\n\nfunction App() {\n  const [messages, setMessaages] = useState([]);\n\n  const [input, setInput] = useState(\"\");\n\n  const [username, setUsername] = useState(\"\");\n\n  useEffect(() => {\n    setUsername(prompt(\"enter your username...\"));\n  }, []);\n\n  useEffect(() => {\n    db.collection(\"messages\")\n      .orderBy(\"timestamp\", \"desc\")\n      .onSnapshot((snapshot) => {\n        setMessaages(snapshot.docs.map((doc) => doc.data()));\n      });\n  }, []);\n\n  const submitHandler = (e) => {\n    e.preventDefault();\n    db.collection(\"messages\").add({\n      username: username,\n      message: input,\n      timestamp: firebase.firestore.FieldValue.serverTimestamp(),\n    });\n    setInput(\"\");\n  };\n\n  return (\n    <div className=\"app\">\n      <img src={Iconn} width=\"100\" height=\"100\" alt=\"messenger icon\" />\n      <h5>\n        Welcome{\" \"}\n        <i>\n          <b>{username}</b>\n        </i>\n      </h5>\n      {messages.map((message) => (\n        <React.Fragment>\n          <Message message={message} username={username} />\n        </React.Fragment>\n      ))}\n      <div className=\"app__form\">\n        <form>\n          <input\n            className=\"app__input form-control\"\n            type=\"text\"\n            value={input}\n            placeholder=\"Type a message\"\n            onChange={(e) => setInput(e.target.value)}\n            autoFocus\n          />\n          <IconButton\n            className=\"app__button\"\n            color=\"primary\"\n            variant=\"contained\"\n            onClick={submitHandler}\n            type=\"submit\"\n            disabled={!input}\n          >\n            <SendIcon />\n          </IconButton>\n        </form>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}